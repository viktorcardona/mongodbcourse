************************
************************    Aggregation Expressions
************************

$group
------

$sum
$avg
$min
$max
$push
$addToSet

$first  -first you should sort
$last   -first you should sort



Quiz: Aggregation Expressions

Which of the following aggregation expressions must be used in conjunction with a sort to make any sense?

1. $addToSet
2. $first
3. $last
4. $max
5. $min
6. $avg
7. $push
8. $sum

Answer: 2 and 3

================================================================================================
****************
****************    $sum
****************

{
"_id": ObjectId("5h23402834jk2jlkjlj2399048"),
"name": "Nexus",
"category": "Tablets",
"manufacturer": "Google",
"price": 199
},
{
"_id": ObjectId("5h23402831212gggj12399048"),
"name": "Kindle Paper White",
"category": "Tablets",
"manufacturer": "Amazon",
"price": 129
}


db.products.aggregate(
    [{
        $group:{
            _id: {
                "maker":"$manufacturer"
                },
            sum_prices: {$sum:"$price"}
        }
    }]
)


The above aggregation creates a collection results:
{ "_id" : { "maker":"Amazon" }, "sum_prices" : 328 }
{ "_id" : { "maker":"Sony" }, "sum_prices" : 499 }
{ "_id" : { "maker":"Samsung" }, "sum_prices" : 1024.98 }


Quiz: Using $sum

This problem, and some after it, use the zips collection from media.mongodb.org/zips.json. You don't need to download it, but you can if you want, allowing you to test your queries within MongoDB. You can import, once downloaded, using mongoimport
Suppose we have a collection of populations by postal code. The postal codes in are in the _id field, and are therefore unique. Documents look like this:

{
	"city" : "CLANTON",
	"loc" : [
		-86.642472,
		32.835532
	],
	"pop" : 13990,
	"state" : "AL",
	"_id" : "35045"
}
For students outside the United States, there are 50 non-overlapping states in the US with two letter abbreviations such as NY and CA. In addition, the capital of Washington is within an area designated the District of Columbia, and carries the abbreviation DC. For purposes of the mail, the postal service considers DC to be a "state." So in this dataset, there are 51 states. We call postal codes "zip codes." A city may overlap several zip codes.
Write an aggregation query to sum up the population (pop) by state and put the result in a field called population. Don't use a compound _id key (you don't need one and the quiz checker is not expecting one). The collection name is zips. so something along the lines of db.zips.aggregate...

Answer:

db.zips.aggregate(
    [{
        $group:{
            _id: "$state",
            population: {$sum:"$pop"}
        }
    }]
)



================================================================================================

****************
****************    $avg
****************

Average price by category

{
"_id": ObjectId("5h23402834jk2jlkjlj2399048"),
"name": "Nexus",
"category": "Tablets",
"manufacturer": "Google",
"price": 199
},
{
"_id": ObjectId("5h23402831212gggj12399048"),
"name": "Kindle Paper White",
"category": "Tablets",
"manufacturer": "Amazon",
"price": 129
}


db.products.aggregate(
    [{
        $group:{
            _id: {
                "category":"$category"
                },
            avg_price: {$avg:"$price"}
        }
    }]
)


The above aggregation creates a collection results:
{ "_id" : { "category":"Laptops" }, "avg_price" : 499 }
{ "_id" : { "category":"Tablets" }, "avg_price" : 396.4271428571428 }


Quiz: Using $avg

Hands on: This problem uses a subset of the same data as we referenced in the $sum quiz, but only a subset, so the answers you get in this web shell will be different than those you would find using the full data set. They also won't correspond to the actual averages of the populations in the zip codes of those states.

Given population data by zip code (postal code), write an aggregation expression to calculate the average population of a zip code (postal code) by state. This dataset only contains four states, and only 50 zip codes per state, because some browsers have trouble working with large data sets.


Which of the following represents the average populations that you find?

This is a web shell problem, so please interact with the web shell as you would with a shell in a terminal window on your computer. Hit enter after each command. You will not need (or be able to) change databases, and will be working with the zips collection.


1. { "NY": 13226.48, "NJ": 16949.9, "CT": 9705.34, "CA": 19067.72 }
2. { "NY": 16949.9, "NJ": 9705.34, "CT": 13226.48, "CA": 19067.72 }
3. { "NY": 9705.34, "NJ": 16949.9, "CT": 13226.48, "CA": 19067.72 }
4. { "NY": 19067.72, "NJ": 16949.9, "CT": 13226.48, "CA": 9705.34 }
5. { "NY": 10000.34, "NJ": 16949.9, "CT": 13226.48, "CA": 19067.72 }

Answer: 3

The query that give us the result:
db.zips.aggregate([{$group:{ _id:{"state":"$state"},avg_pop:{$avg:"$pop"} }}]);


================================================================================================


****************
****************    $addToSet
****************


{
"_id": ObjectId("5h23402834jk2jlkjlj2399048"),
"name": "Nexus",
"category": "Tablets",
"manufacturer": "Google",
"price": 199
},
{
"_id": ObjectId("5h23402831212gggj12399048"),
"name": "Kindle Paper White",
"category": "Tablets",
"manufacturer": "Amazon",
"price": 129
}


db.products.aggregate(
    [{
        $group:{
            _id: {
                "maker":"$manufacturer"
                },
            categories: {$addToSet:"$category"}
        }
    }]
)

results:

{ "_id" : { "marker":"Apple" }, "categories" : ["Cellphones", "Tablets"] }


Quiz: Using $addToSet

This problem uses the same zip code data as the using $sum quiz. See that quiz for a longer explanation.
Suppose we population by zip code (postal code) data that looks like this (putting in a query for the zip codes in Palo Alto)

> db.zips.find({state:"CA",city:"PALO ALTO"})
{ "city" : "PALO ALTO", "loc" : [ -122.149685, 37.444324 ], "pop" : 15965, "state" : "CA", "_id" : "94301" }
{ "city" : "PALO ALTO", "loc" : [ -122.184234, 37.433424 ], "pop" : 1835, "state" : "CA", "_id" : "94304" }
{ "city" : "PALO ALTO", "loc" : [ -122.127375, 37.418009 ], "pop" : 24309, "state" : "CA", "_id" : "94306" }

Write an aggregation query that will return the postal codes that cover each city. The results should look like this:
		{
			"_id" : "CENTREVILLE",
			"postal_codes" : [
				"22020",
				"49032",
				"39631",
				"21617",
				"35042"
			]
		},
Again the collection will be called zips. You can deduce what your result column names should be from the above output. (ignore the issue that a city may have the same name in two different states and is in fact two different cities in that case - for eg Springfield, MO and Springfield, MA)

Answer:

db.zips.aggregate(
    [{
        $group:{
            _id: "$city",
            postal_codes: {$addToSet:"$_id"}
        }
    }]
)


================================================================================================

****************
****************    $push
****************


{
"_id": ObjectId("5h23402834jk2jlkjlj2399048"),
"name": "Nexus",
"category": "Tablets",
"manufacturer": "Google",
"price": 199
},
{
"_id": ObjectId("5h23402831212gggj12399048"),
"name": "Kindle Paper White",
"category": "Tablets",
"manufacturer": "Amazon",
"price": 129
}


db.products.aggregate(
    [{
        $group:{
            _id: {
                "maker":"$manufacturer"
            },
            categories: {$push:"$category"}
        }
    }]
)

results:

{ "_id" : { "marker":"Sony" }, "categories" : ["Laptops" ] }
{ "_id" : { "marker":"Amazon" }, "categories" : ["Tablets", "Tablets" ] }
{ "_id" : { "marker":"Apple" }, "categories" : ["Cellphones", "Tablets", "Tablets", "Tablets" ] }


Quiz: Using $push

Given the zipcode dataset (explained more fully in the using $sum quiz) that has documents that look like this:
> db.zips.findOne()
{
	"city" : "ACMAR",
	"loc" : [
		-86.51557,
		33.584132
	],
	"pop" : 6055,
	"state" : "AL",
	"_id" : "35004"
}

would you expect the following two queries to produce the same result or different results?

db.zips.aggregate([{"$group":{"_id":"$city", "postal_codes":{"$push":"$_id"}}}])
db.zips.aggregate([{"$group":{"_id":"$city", "postal_codes":{"$addToSet":"$_id"}}}])

1. Same result
2. Different Result

Answer: 1

because _id is unique


================================================================================================


****************
****************    $max and $min
****************


{
"_id": ObjectId("5h23402834jk2jlkjlj2399048"),
"name": "Nexus",
"category": "Tablets",
"manufacturer": "Google",
"price": 199
},
{
"_id": ObjectId("5h23402831212gggj12399048"),
"name": "Kindle Paper White",
"category": "Tablets",
"manufacturer": "Amazon",
"price": 129
}


db.products.aggregate(
    [{
        $group:{
            _id: {
                "maker":"$manufacturer"
            },
            maxprice:{$max:"$price"}
        }
    }]
)

results:

{ "_id" : { "marker":"Sony" }, "maxprice" : 789.875 }
{ "_id" : { "marker":"Apple" }, "maxprice" : 789.875 }

but it is not easy to find wich is the product with this max price, we have to look at it with $first,$last,$sort


Quiz: Using $max and $min

Again thinking about the zip code database, write an aggregation query that will return the population of the postal code in each state with the highest population. It should return output that looks like this:
{
			"_id" : "WI",
			"pop" : 57187
		},
		{
			"_id" : "WV",
			"pop" : 70185
		},
..and so on
Once again, the collection is named zips.

Answer:

db.zips.aggregate(
    [{
        $group:{
            _id: "$state",
            pop:{$max:"$pop"}
        }
    }]
)


================================================================================================



****************
****************    Double $group Stages
****************


{
"_id": ObjectId("5h23402834jk2jlkjlj2399048"),
"student_id": 1,
"class_id": 397,
"type": "homework",
"score": 20.6898342312
},
{
"_id": ObjectId("5h23402333344556777772399048"),
"student_id": 1,
"class_id": 397,
"type": "quiz",
"score": 78.6898342312
}

average class grade in each class, then average all students grade within the class and avg those grades

db.grades.aggregate(
    [{
        '$group':{
            _id: {class_id: "$class_id", student_id: "$student_id"},
            'average':{$avg:"$score"}
        }
    },
    {
        '$group':{
            _id:"$_id.class_id",
            'average':{"$avg":"$average"}
        }
    }]
)

Can you see that the above query pipes the groups
The first group outputs the avg per class and student (student:1, class:1, [type:score|quiz1:7.88,quiz2:9.876,project:99])
    then the second group outputs the avg per class.

results:
{ "_id" : 382, "average" : 45.981231239091 }
{ "_id" : 57, "average" : 57.6121234444490 }



Quiz: Double $group stages

Given the following collection:
> db.fun.find()
{ "_id" : 0, "a" : 0, "b" : 0, "c" : 21 }
{ "_id" : 1, "a" : 0, "b" : 0, "c" : 54 }
{ "_id" : 2, "a" : 0, "b" : 1, "c" : 52 }
{ "_id" : 3, "a" : 0, "b" : 1, "c" : 17 }
{ "_id" : 4, "a" : 1, "b" : 0, "c" : 22 }
{ "_id" : 5, "a" : 1, "b" : 0, "c" : 5 }
{ "_id" : 6, "a" : 1, "b" : 1, "c" : 87 }
{ "_id" : 7, "a" : 1, "b" : 1, "c" : 97 }

And the following aggregation query
db.fun.aggregate([{$group:{_id:{a:"$a", b:"$b"}, c:{$max:"$c"}}}, {$group:{_id:"$_id.a", c:{$min:"$c"}}}])
What values are returned?

a. 17 and 54
b. 97 and 21
c. 54 and 5
d. 52 and 22

Answer: d


================================================================================================


****************
****************    $project        1:1
****************

reshape the doc
-remove keys
-add keys
-reshape keys
-use some simple functions on keys
    *$toUpper
    *$toLower
    *add
    *multiply


{
"_id": ObjectId("5h23402834jk2jlkjlj2399048"),
"name": "Nexus",
"category": "Tablets",
"manufacturer": "Google",
"price": 199
},
{
"_id": ObjectId("5h23402831212gggj12399048"),
"name": "Kindle Paper White",
"category": "Tablets",
"manufacturer": "Amazon",
"price": 129
}

Lets reshape the doc:

db.products.aggregate([
    {$project:
        {
            _id:0,
            'maker': {$toLower:"$manufacturer"},
            'details':{
                    'category':"$category",
                    'price':{"$multiply":["$price",10]}
            },
            'item':'$name'
        }
    }]
)

results:

{ "maker" : "Apple", "details" : {"category":"Tablets", "price": 78654}, "item" : "Galaxy Tab 10" }
{ "maker" : "Amazon", "details" : {"category":"Tablets", "price": 199}, "item" : "Kindle Fire" }


Quiz: Using $project

Write an aggregation query with a single projection stage that will transform the documents in the zips collection from this:
{
	"city" : "ACMAR",
	"loc" : [
		-86.51557,
		33.584132
	],
	"pop" : 6055,
	"state" : "AL",
	"_id" : "35004"
}

to documents in the result set that look like this:
{
	"city" : "acmar",
	"pop" : 6055,
	"state" : "AL",
	"zip" : "35004"
}
So that the checker works properly, please specify what you want to do with the _id key as the first item. The other items should be ordered as above. As before, assume the collection is called zips. You are running only the projection part of the pipeline for this quiz.

A few facts not mentioned in the lesson that you will need to know to get this right: If you don't mention a key, it is not included, except for _id, which must be explicitly suppressed. If you want to include a key exactly as it is named in the source document, you just write key:1, where key is the name of the key. You will probably get more out of this quiz is you download the zips.json file and practice in the shell. zips.json link is in the using $sum quiz

Answer:

db.zips.aggregate([
    {$project:
        {
            _id:0,
            city:{$toLower:"$city"},
            pop:1,
            state:1,
            zip:"$_id"
        }
    }
])



================================================================================================


****************
****************    $match
****************

Lecture Notes

One thing to note about $match (and $sort) is that they can use indexes, but only if done at the beginning of the aggregation pipeline.

You can read the documentation here(https://docs.mongodb.org/manual/core/aggregation-pipeline/?_ga=1.44082400.558871039.1458180325).
-----------------------------------------

filter      n:1


zip collection (_id is the zip code):

{
    "_id" : "35004",
	"city" : "ACMAR",
	"loc" : [
		-86.51557,
		33.584132
	],
	"pop" : 6055,
	"state" : "AL"
}


db.zips.aggregate([
    {$match:
        {
            state:"CA"
        }
    }
])

results:

{"_id":"909992", "city" : "LOS ANGELES", "loc" : [-118.23, 34.045666], "pop" : 5653, "state": "CA"}


db.zips.aggregate([
    {$match:
        {
            state:"CA"
        }
    },
    {$group:
        {
            _id: "$city",
            population: {$sum:"$pop"},
            zip_codes: {$addToSet: "$_id"}
        }
    }
])

results:

{ "_id" : "TRUCKEE", "population" : 9743, "zip_codes": [ "96162", "96161" ] }
{ "_id" : "LOS ANGELES", "population" : 5653, "zip_codes": [ "96140" ] }
{ "_id" : "TAHOMA", "population" : 1029, "zip_codes": [ "96142" ] }


db.zips.aggregate([
    {$match:
        {
            state:"CA"
        }
    },
    {$group:
        {
            _id: "$city",
            population: {$sum:"$pop"},
            zip_codes: {$addToSet: "$_id"}
        }
    },
    {$project:
        {
            _id: 0,
            city: "$_id",
            population:1,
            zip_codes:1
        }
    }
])

results:

{ "population" : 9743, "zip_codes": [ "96162", "96161" ], "city" : "TRUCKEE" }
it does not retain the original order of fields


Quiz: Using $match

Again, thinking about the zipcode collection, write an aggregation query with a single match phase that filters for zipcodes with greater than 100,000 people. You may need to look up the use of the $gt operator in the MongoDB docs (https://docs.mongodb.org/manual/reference/operator/).

Assume the collection is called zips.

Answer:

db.zips.aggregate([
    {$match:
        {
            pop:{$gt: 100000}
        }
    }
])


================================================================================================



================================================================================================



****************
****************    $sort
****************

-support:
    *disk
    *memory:  but limited by 100 MB

-before or after the grouping stage


{
    "_id" : "35004",
	"city" : "ACMAR",
	"loc" : [
		-86.51557,
		33.584132
	],
	"pop" : 6055,
	"state" : "AL"
}


db.zips.aggregate([
    {$match:
        {
            state:"NY"
        }
    },
    {$group:
        {
            _id: "$city",
            population: {$sum:"$pop"}
        }
    },
    {$project:
        {
            _id: 0,
            city: "$_id",
            population:1
        }
    },
    {$sort:
        {
            population:-1
        }
    }
])

results:

{ "population" : 2300504, "city" : "BROOKLYN" }   //bigger city
.
.
.
{ "population" : 83017,   "city" : "BINGHAMTON" } //smaller city



Quiz: Using $sort

Again, considering the zipcode collection, which has documents that look like this,
{
	"city" : "ACMAR",
	"loc" : [
		-86.51557,
		33.584132
	],
	"pop" : 6055,
	"state" : "AL",
	"_id" : "35004"
}

Write an aggregation query with just a sort stage to sort by (state, city), both ascending. Assume the collection is called zips.

Answer:

db.zips.aggregate([
    {$sort:
        {
            state:1,
            city:1
        }
    }
])


================================================================================================


****************
****************    $skip   and     $limit
****************      1                2


sort
o   o   o   o   o   [o   o   o]   o     o   o

{
    "_id" : "35004",
	"city" : "ACMAR",
	"loc" : [
		-86.51557,
		33.584132
	],
	"pop" : 6055,
	"state" : "AL"
}


db.zips.aggregate([
    {$match:
        {
            state:"NY"
        }
    },
    {$group:
        {
            _id: "$city",
            population: {$sum:"$pop"}
        }
    },
    {$project:
        {
            _id: 0,
            city: "$_id",
            population:1
        }
    },
    {$sort:
        {
            population:-1
        }
    },
    {$skip: 10},
    {$limit: 5}
])

results:

{ "population" : 165629, "city" : "ASTORIA" }
{ "population" : 145967, "city" : "JACKSON" }
{ "population" : 100646, "city" : "FAR ROCKAWAY" }
{ "population" : 85732, "city" : "RIDGEWOOD" }
{ "population" : 83017, "city" : "BINGHAMTON" }



Quiz: Using $limit and $skip

Suppose you change the order of skip and limit in the query shown in the lesson, to look like this:
db.zips.aggregate([
    {$match:
     {
	 state:"NY"
     }
    },
    {$group:
     {
	 _id: "$city",
	 population: {$sum:"$pop"},
     }
    },
    {$project:
     {
	 _id: 0,
	 city: "$_id",
	 population: 1,
     }
    },
    {$sort:
     {
	 population:-1
     }
    },
    {$limit: 5},
    {$skip: 10}
])

How many documents do you think will be in the result set?

A. 10
B. 5
C. 0
D. 100

Answer: C
because:

limit 5 then skip 10
[.....].....->

================================================================================================


****************
****************    $first   and     $last
****************

sort(a,b)
group(a)

a:0     b:23    first
a:0     b:45
a:0     b:97    last
--------------
a:1     b:17    first
a:1     b:68
a:1     b:73    last

Largest City in Every State:

db.zips.aggregate([
    /* get the population of every city in every state */
    {$group:
     {
	    _id: {state: "$state", city:"$city"},
	    population: {$sum: "$pop"}
     }
    },
    /* sort by state , population */
    {$sort:
     {
	    "_id.state":1,
	    "population":-1
     }
    },
    /* group by state, get the first item in each group */
    {$group:
     {
	    _id: "$_id.state",
	    city: {$first: "$_id.city""},
	    population: 1,
     }
    },
    /* now sort by state again */
    {$sort:
        {
            "_id":1
        }
    }
])

results:

{ "_id" : "AK", "city" : "ANCHORAGE", "population" : 165629 }
{ "_id" : "AL", "city" : "BIRMINGHA", "population" : 242707 }


Quiz: Revisiting $first and $last

Given the following collection:
> db.fun.find()
{ "_id" : 0, "a" : 0, "b" : 0, "c" : 21 }
{ "_id" : 1, "a" : 0, "b" : 0, "c" : 54 }
{ "_id" : 2, "a" : 0, "b" : 1, "c" : 52 }
{ "_id" : 3, "a" : 0, "b" : 1, "c" : 17 }
{ "_id" : 4, "a" : 1, "b" : 0, "c" : 22 }
{ "_id" : 5, "a" : 1, "b" : 0, "c" : 5 }
{ "_id" : 6, "a" : 1, "b" : 1, "c" : 87 }
{ "_id" : 7, "a" : 1, "b" : 1, "c" : 97 }

What would be the value of c in the result from this aggregation query

db.fun.aggregate([
    {$match:{a:0}},
    {$sort:{c:-1}},
    {$group:{_id:"$a", c:{$first:"$c"}}}
])

21
54
97
5

Answer: 54



================================================================================================


****************
****************    $unwind
****************

{ a:1, b:2, c:['apple', 'pear', 'orange']}

c array is pre-joined data

$unwind: "$c"

result (explosion of data):

{ a:1, b:2, c:'apple'}
{ a:1, b:2, c:'pear'}
{ a:1, b:2, c:'orange'}



Quiz: Using $unwind

Suppose you have the following collection:

db.people.find()
{ "_id" : "Will", "likes" : [ "physics", "MongoDB", "indexes" ] }
{ "_id" : "Dwight", "likes" : [ "starting companies", "restaurants", "MongoDB" ] }
And you unwind the "likes" array of each document. How many documents will you wind up with?


2
4
6
9

Answer: 6


$unwind example
===============

post:

{
    "_id":"ObjectId("12938719273914377777655")"
    "body":"When....",
    "permalink": "wyasdoaisudjRT",
    "author": "machine",
    "title": "Declaration of Independence",
    "tags": [
                "rhinoceros",
                "adult",
                "stranger",
                "father",
                "schedule",
                "interactive",
                "credit"
    ],
    "date": ISODate("2016-04-14T05:05:17.0162")
}


db.posts.agreggate([

    /* unwind by tags */
    {
        "$unwind":"$tags"
    },
    /* now group by tags, counting each tag */
    {
        "$group":
        {
            "_id":"$tags",
            "count":{$sum:1}
        }
    },
    /* sort by popularity */
    {
        "$sort":{"count":-1}
    },
    /* show me the top 10 */
    {
        "$limit":10
    },
    /* change the name of _id to be tag*/
    {
        "$project":{
            _id:0,
            'tag':'$_id',
            'count':1
        }
    }

]);

Results:

{ "count" : 13, "tag" : "sphynx"  }
{ "count" : 12, "tag" : "soldier" }



Quiz: $unwind example

Which grouping operator will enable to you to reverse the effects of an unwind?

$sum
$addToSet
$push
$first

Answer: $push


================================================================================================


****************
****************    Double      $unwind
****************

inventory

{
    "_id" : "ObjectId("5'09'0349'23kjhkhf234")",
    "name" : "T-shirt",
    "sizes" : [
                "small",
                "Medium",
                "Large",
                "X-Large"
    ],
    "colors" : [
                "navy",
                "balck",
                "orange",
                "red"
    ]
}

number of items on any given size and color??

db.inventory.aggregate([
    {$unwind: "$sizes"},
    {$unwind: "$colors"},
    {
        $group:
              {
                '_id': {'size':'$sizes', 'color': '$colors'},
                count: {'$sum':1}
              }
    }
]);

results:

{ "_id" : { "size" : "small", "color" : "white" }, "count" : 2 }

Quiz: Double $unwind

Can you reverse the effects of a double unwind (2 unwinds in a row) in our inventory collection (shown in the lesson ) with the $push operator?

Yes
No

Answer: Yes

how? with 2 pushes:

db.inventory.aggregate([
    {$unwind: "$sizes"},
    {$unwind: "$colors"},
    /* create the color array */
    {
        $group:
              {
                '_id': {name:'$name', size: '$sizes'},
                colors: {'$push': "$colors"}
              }
    },
    /* create the size array */
    {
        $group:
              {
                '_id': {name:'$_id.name', 'colors': {"$colors"}}, //grouping by the colors array
                sizes: {'$push': "$_id.size"}
              }
    },
    /* reshape for beauty */
    {
        $project:
               {
                    _id:0,
                    "name":"$_id.name",
                    "sizes":1,
                    "colors": "$_id.colors"
               }
    }
]);

Results:

{
    "sizes" : [
                "small",
                "Medium",
                "Large",
                "X-Large"
    ],
    "name" : "T-shirt",
    "colors" : [
                "navy",
                "balck",
                "orange",
                "red"
    ]
}

And other way, and this work because the values on arrays are unique:

db.inventory.aggregate([
    {$unwind: "$sizes"},
    {$unwind: "$colors"},
    {
        $group:
              {
                '_id': "$name"",
                'sizes':  {'$addToSet: "$sizes"},
                'colors': {'$addToSet: "$colors"}
              }
    }
]);


================================================================================================

================================================================================================

================================================================================================

================================================================================================

================================================================================================

================================================================================================

